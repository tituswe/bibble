// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  accounts Account[]
  petListings PetListing[]
  pets Pet[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model PetListing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  petId String @db.ObjectId
  title String
  description String
  imageSrc String
  createdAt DateTime @default(now())
  price Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pets Pet[]
}

model Pet {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  petListingId String @db.ObjectId
  name String
  birthday DateTime
  breed String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  petListing PetListing @relation(fields: [petListingId], references: [id], onDelete: Cascade)
}