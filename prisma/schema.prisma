// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum HairCoat {
  SHORT
  MEDIUM
  LONG
}

enum SaleType {
  PURCHASE
  ADOPT
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  profile Profile?
  accounts Account[]
  pets Pet[]
  chats ChatParticipant[]
  messages Message[]
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio String
  verified Boolean
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Pet {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  species Species @relation(fields: [speciesId], references: [id])
  speciesId String @db.ObjectId
  saleType SaleType
  gender Gender
  breed Breed @relation(fields: [breedId], references: [id])
  breedId String @db.ObjectId
  birthday DateTime
  origin Country @relation(fields: [originId], references: [id])
  originId String @db.ObjectId
  lister User @relation(fields: [listerId], references: [id], onDelete: Cascade)
  listerId String @db.ObjectId
  images String[]
  price Int
  postedAt DateTime @default(now())
  isHealthTested Boolean
  isHdbApproved Boolean
  avsLicense AvsLicense?
  vaccineIds String[] @db.ObjectId
  isNeutered Boolean
  isHypoallergenic Boolean
  isMicrochipped Boolean
  hairCoat HairCoat
  isPottyTrained Boolean
  locationValue String
  description String
  chats Chat[]
}

model Species {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  breeds Breed[]
  pets Pet[]
}

model Breed {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  species Species @relation(fields: [speciesId], references: [id], onDelete: Cascade)
  speciesId String @db.ObjectId
  name String

  pets Pet[]
}

model Country {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  pets Pet[]
}

model AvsLicense {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId String @unique @db.ObjectId
  licensee String
  licenseNumber String
  issuedAt DateTime
  expiresAt DateTime
}

model Vaccine {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  participants ChatParticipant[]
  messages Message[]
  listingId String @db.ObjectId
  listing Pet @relation(fields: [listingId], references: [id], onDelete: Cascade)
  // latestMessageId String @unique @db.ObjectId
  // latestMessage Message? @relation(name: "latestChatMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ChatParticipant {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId
  hasSeenLatestMessage Boolean
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String @db.ObjectId
  message String
  // isLatestIn Chat? @relation(name: "latestChatMessage")
}